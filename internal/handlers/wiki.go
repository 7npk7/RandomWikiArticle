package handlers

import (
	"encoding/json"
	"fmt"
	"math/rand"
	"net/http"
	"net/url"
	"time"
)

type WikiResponse struct {
	Continue struct {
		CmContinue string `json:"cmcontinue"`
	} `json:"continue"`
	Query struct {
		CategoryMembers []struct {
			Title string `json:"title"`
		} `json:"categorymembers"`
	} `json:"query"`
}

// –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç—É —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞ –ø–æ—Å–ª–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä
var categoryMap = map[string]string{
	"science": "–ù–∞—É–∫–∞",
	"it":      "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞",
	"sport":   "–°–ø–æ—Ä—Ç",
	"books":   "–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞",
	"games":   "–ö–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã–µ_–∏–≥—Ä—ã",
	"movies":  "–ö–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ",
}

func init() {
	rand.Seed(time.Now().UnixNano())
}

func GetRandomArticleHandler(w http.ResponseWriter, r *http.Request) {
	category := r.URL.Query().Get("category")
	fmt.Printf("üîç –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç—å–∏ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: %s\n", category)

	if category == "" {
		sendError(w, "Category is required", http.StatusBadRequest)
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º —Ä—É—Å—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
	wikiCategory, exists := categoryMap[category]
	if !exists {
		sendError(w, "Invalid category", http.StatusBadRequest)
		return
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è API –∑–∞–ø—Ä–æ—Å–∞ —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
	categoryPath := "–ö–∞—Ç–µ–≥–æ—Ä–∏—è:" + wikiCategory
	apiURL := fmt.Sprintf(
		"https://ru.wikipedia.org/w/api.php?action=query&list=categorymembers&cmtitle=%s&format=json&cmlimit=500&cmnamespace=0&cmtype=page",
		url.QueryEscape(categoryPath),
	)

	fmt.Printf("–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º—ã–π URL: %s\n", apiURL)

	// –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
	w.Header().Set("Cache-Control", "no-cache, no-store, must-revalidate")
	w.Header().Set("Pragma", "no-cache")
	w.Header().Set("Expires", "0")

	client := &http.Client{Timeout: 15 * time.Second}
	req, err := http.NewRequest("GET", apiURL, nil)
	if err != nil {
		sendError(w, fmt.Sprintf("Failed to create request: %v", err), http.StatusInternalServerError)
		return
	}

	req.Header.Set("User-Agent", "RandomWikiArticle/1.0 (educational project)")

	var allArticles []struct {
		Title string `json:"title"`
	}
	cmcontinue := ""

	// –ü–æ–ª—É—á–∞–µ–º –¥–æ 2000 —Å—Ç–∞—Ç–µ–π (4 –∑–∞–ø—Ä–æ—Å–∞ –ø–æ 500)
	for i := 0; i < 4; i++ {
		apiURL := fmt.Sprintf(
			"https://ru.wikipedia.org/w/api.php?action=query&list=categorymembers&cmtitle=%s&format=json&cmlimit=500&cmnamespace=0",
			url.QueryEscape(categoryPath),
		)

		if cmcontinue != "" {
			apiURL += "&cmcontinue=" + url.QueryEscape(cmcontinue)
		}

		resp, err := client.Do(req)
		if err != nil {
			fmt.Printf("‚ùå –û—à–∏–±–∫–∞ API –∑–∞–ø—Ä–æ—Å–∞: %v\n", err)
			continue
		}
		defer resp.Body.Close()

		var wikiResp WikiResponse
		if err := json.NewDecoder(resp.Body).Decode(&wikiResp); err != nil {
			fmt.Printf("–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞: %v\n", err)
			continue
		}

		allArticles = append(allArticles, wikiResp.Query.CategoryMembers...)

		if wikiResp.Continue.CmContinue == "" {
			break
		}
		cmcontinue = wikiResp.Continue.CmContinue
	}

	fmt.Printf("‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å—Ç–∞—Ç–µ–π: %d\n", len(allArticles))

	if len(allArticles) == 0 {
		sendError(w, fmt.Sprintf("No articles found in category: %s", category), http.StatusNotFound)
		return
	}

	// –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Å—Ç–∞—Ç—å—é –∏–∑ –≤—Å–µ–≥–æ —Å–ø–∏—Å–∫–∞
	source := rand.NewSource(time.Now().UnixNano())
	rnd := rand.New(source)
	randomArticle := allArticles[rnd.Intn(len(allArticles))]

	if randomArticle.Title == "" {
		sendError(w, "Failed to get valid random article", http.StatusInternalServerError)
		return
	}

	fmt.Printf("üìé –í—ã–±—Ä–∞–Ω–∞ —Å—Ç–∞—Ç—å—è: %s\n", randomArticle.Title)

	articleURL := fmt.Sprintf("https://ru.wikipedia.org/wiki/%s",
		url.PathEscape(randomArticle.Title))

	// –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(map[string]string{
		"url":   articleURL,
		"title": randomArticle.Title,
	})
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—à–∏–±–æ–∫
func sendError(w http.ResponseWriter, message string, status int) {
	fmt.Printf("‚ùå %s (—Å—Ç–∞—Ç—É—Å: %d)\n", message, status)
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(status)
	json.NewEncoder(w).Encode(map[string]string{
		"error": message,
	})
}
