package handlers

import (
	"CursorWebApp/internal/services"
	"encoding/json"
	"fmt"
	"io"
	"math/rand"
	"net/http"
	"net/url"
	"os"
	"time"
)

type WikiResponse struct {
	Query struct {
		Search []struct {
			Title   string `json:"title"`
			Snippet string `json:"snippet"`
		} `json:"search"`
		CategoryMembers []struct {
			Title string `json:"title"`
		} `json:"categorymembers"`
	} `json:"query"`
	Continue struct {
		CmContinue string `json:"cmcontinue"`
	} `json:"continue"`
}

type ArticleResponse struct {
	URL     string `json:"url"`
	Title   string `json:"title"`
	Summary string `json:"summary,omitempty"`
}

// –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç—É —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π –∫–∞—Ç–µ–≥–æ—Ä–∏–π
var categoryMap = map[string]string{
	"science": "–ù–∞—É–∫–∞",
	"it":      "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ_—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏",
	"sport":   "–°–ø–æ—Ä—Ç",
	"books":   "–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞",
	"games":   "–ö–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã–µ_–∏–≥—Ä—ã",
	"movies":  "–ö–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ",
}

func init() {
	rand.Seed(time.Now().UnixNano())
}

func GetRandomArticleHandler(w http.ResponseWriter, r *http.Request) {
	// –í–∫–ª—é—á–∞–µ–º CORS –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
	w.Header().Set("Access-Control-Allow-Origin", "*")
	w.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS")
	w.Header().Set("Access-Control-Allow-Headers", "Content-Type")
	w.Header().Set("Content-Type", "application/json")

	// –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞–ø—Ä–æ—Å–∞
	category := r.URL.Query().Get("category")
	fmt.Printf("üîç –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: %s\n", category)

	if category == "" {
		http.Error(w, `{"error": "Category is required"}`, http.StatusBadRequest)
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º —Ä—É—Å—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
	ruCategory, ok := categoryMap[category]
	if !ok {
		fmt.Printf("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: %s\n", category)
		http.Error(w, `{"error": "Invalid category"}`, http.StatusBadRequest)
		return
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL –¥–ª—è API –∑–∞–ø—Ä–æ—Å–∞
	apiURL := fmt.Sprintf(
		"https://ru.wikipedia.org/w/api.php?action=query&list=categorymembers&cmtitle=%s&format=json&cmlimit=500&cmnamespace=0&origin=*",
		url.QueryEscape("–ö–∞—Ç–µ–≥–æ—Ä–∏—è:"+ruCategory),
	)
	fmt.Printf("üìå URL –∑–∞–ø—Ä–æ—Å–∞: %s\n", apiURL)

	// –°–æ–∑–¥–∞–µ–º HTTP –∫–ª–∏–µ–Ω—Ç —Å —Ç–∞–π–º–∞—É—Ç–æ–º
	client := &http.Client{Timeout: 10 * time.Second}

	// –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API Wikipedia
	req, err := http.NewRequest("GET", apiURL, nil)
	if err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: %v\n", err)
		json.NewEncoder(w).Encode(map[string]string{"error": "Failed to create request"})
		return
	}

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
	req.Header.Set("User-Agent", "WikiRandomArticle/1.0 (https://your-domain.com; your@email.com)")
	req.Header.Set("Accept", "application/json")
	req.Header.Set("Accept-Language", "ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7")

	resp, err := client.Do(req)
	if err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: %v\n", err)
		json.NewEncoder(w).Encode(map[string]string{"error": "Failed to fetch articles"})
		return
	}
	defer resp.Body.Close()

	// –ß–∏—Ç–∞–µ–º —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
	body, err := io.ReadAll(resp.Body)
	if err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞: %v\n", err)
		json.NewEncoder(w).Encode(map[string]string{"error": "Failed to read response"})
		return
	}

	// –í—ã–≤–æ–¥–∏–º –ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
	fmt.Printf("üìù –ù–∞—á–∞–ª–æ –æ—Ç–≤–µ—Ç–∞: %s\n", string(body[:min(len(body), 200)]))

	var result struct {
		Query struct {
			CategoryMembers []struct {
				Title string `json:"title"`
			} `json:"categorymembers"`
		} `json:"query"`
	}

	if err := json.Unmarshal(body, &result); err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: %v\n", err)
		json.NewEncoder(w).Encode(map[string]string{"error": "Failed to decode Wikipedia response"})
		return
	}

	if len(result.Query.CategoryMembers) == 0 {
		fmt.Printf("‚ùå –°—Ç–∞—Ç—å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: %s\n", ruCategory)
		json.NewEncoder(w).Encode(map[string]string{"error": "No articles found"})
		return
	}

	// –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Å—Ç–∞—Ç—å—é
	randomArticle := result.Query.CategoryMembers[rand.Intn(len(result.Query.CategoryMembers))]

	// –§–æ—Ä–º–∏—Ä—É–µ–º URL —Å—Ç–∞—Ç—å–∏
	articleURL := fmt.Sprintf("https://ru.wikipedia.org/wiki/%s",
		url.PathEscape(randomArticle.Title))

	// –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
	response := ArticleResponse{
		URL:   articleURL,
		Title: randomArticle.Title,
	}

	// –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å—Ç–∞—Ç—å–∏
	if content, err := getArticleContent(randomArticle.Title); err == nil && content != "" {
		if gigaChatService := services.NewGigaChatService(os.Getenv("GIGACHAT_TOKEN")); gigaChatService != nil {
			if summary, err := gigaChatService.GenerateSummary(r.Context(), content); err == nil {
				response.Summary = summary
			}
		}
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
	if err := json.NewEncoder(w).Encode(response); err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞: %v\n", err)
		http.Error(w, `{"error": "Failed to send response"}`, http.StatusInternalServerError)
		return
	}
}

func getArticleContent(title string) (string, error) {
	apiURL := fmt.Sprintf(
		"https://ru.wikipedia.org/w/api.php?action=query&prop=extracts&exintro=true&format=json&titles=%s",
		url.QueryEscape(title),
	)

	resp, err := http.Get(apiURL)
	if err != nil {
		return "", err
	}
	defer resp.Body.Close()

	var result map[string]interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return "", err
	}

	// –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –æ—Ç–≤–µ—Ç–∞ API
	if pages, ok := result["query"].(map[string]interface{})["pages"].(map[string]interface{}); ok {
		for _, page := range pages {
			if pageMap, ok := page.(map[string]interface{}); ok {
				if extract, ok := pageMap["extract"].(string); ok {
					return extract, nil
				}
			}
		}
	}

	return "", fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–ª—É—á–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å—Ç–∞—Ç—å–∏")
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—à–∏–±–æ–∫
func sendError(w http.ResponseWriter, message string, status int) {
	fmt.Printf("‚ùå %s (—Å—Ç–∞—Ç—É—Å: %d)\n", message, status)
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(status)
	json.NewEncoder(w).Encode(map[string]string{
		"error": message,
	})
}

// –î–æ–±–∞–≤–∏–º –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è –æ—Ç–≤–µ—Ç–∞
type SearchResponse struct {
	URL      string   `json:"url,omitempty"`
	Title    string   `json:"title,omitempty"`
	Summary  string   `json:"summary,omitempty"`
	Similar  []string `json:"similar,omitempty"` // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ –¥–ª—è –ø–æ—Ö–æ–∂–∏—Ö —Å—Ç–∞—Ç–µ–π
	NotFound bool     `json:"notFound,omitempty"`
}

func SearchWikiHandler(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query().Get("query")
	if query == "" {
		sendError(w, "Query is required", http.StatusBadRequest)
		return
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
	fmt.Printf("–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: %s\n", query)

	// –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
	apiURL := fmt.Sprintf(
		"https://ru.wikipedia.org/w/api.php?action=query&list=search&srsearch=%s&format=json&srlimit=5&utf8=1&srwhat=text&srenablerewrites=1",
		url.QueryEscape(query),
	)

	// –°–æ–∑–¥–∞–µ–º HTTP –∫–ª–∏–µ–Ω—Ç —Å —Ç–∞–π–º–∞—É—Ç–æ–º
	client := &http.Client{Timeout: 10 * time.Second}

	req, err := http.NewRequest("GET", apiURL, nil)
	if err != nil {
		sendError(w, fmt.Sprintf("Failed to create request: %v", err), http.StatusInternalServerError)
		return
	}

	// –î–æ–±–∞–≤–ª—è–µ–º User-Agent
	req.Header.Set("User-Agent", "WikiSearchApp/1.0")

	resp, err := client.Do(req)
	if err != nil {
		sendError(w, fmt.Sprintf("Failed to search: %v", err), http.StatusInternalServerError)
		return
	}
	defer resp.Body.Close()

	// –ß–∏—Ç–∞–µ–º —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
	body, err := io.ReadAll(resp.Body)
	if err != nil {
		sendError(w, fmt.Sprintf("Failed to read response: %v", err), http.StatusInternalServerError)
		return
	}

	// –í—ã–≤–æ–¥–∏–º –æ—Ç–≤–µ—Ç API –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
	fmt.Printf("–û—Ç–≤–µ—Ç API Wikipedia: %s\n", string(body))

	var result struct {
		Query struct {
			Search []struct {
				Title   string `json:"title"`
				Snippet string `json:"snippet"`
			} `json:"search"`
			SearchInfo struct {
				TotalHits int `json:"totalhits"`
			} `json:"searchinfo"`
		} `json:"query"`
	}

	if err := json.Unmarshal(body, &result); err != nil {
		sendError(w, fmt.Sprintf("Failed to decode response: %v", err), http.StatusInternalServerError)
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
	if len(result.Query.Search) == 0 {
		// –ü—Ä–æ–±—É–µ–º –ø–æ–∏—Å–∫ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –æ–ø–µ—á–∞—Ç–æ–∫
		apiURL = fmt.Sprintf(
			"https://ru.wikipedia.org/w/api.php?action=query&list=search&srsearch=%s&format=json&srlimit=5&utf8=1&srwhat=text&srenablerewrites=1&srinfo=suggestion",
			url.QueryEscape(query),
		)

		req, _ = http.NewRequest("GET", apiURL, nil)
		req.Header.Set("User-Agent", "WikiSearchApp/1.0")

		resp, err = client.Do(req)
		if err != nil || resp.StatusCode != http.StatusOK {
			w.Header().Set("Content-Type", "application/json")
			json.NewEncoder(w).Encode(SearchResponse{
				NotFound: true,
			})
			return
		}
		defer resp.Body.Close()

		if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
			w.Header().Set("Content-Type", "application/json")
			json.NewEncoder(w).Encode(SearchResponse{
				NotFound: true,
			})
			return
		}
	}

	if len(result.Query.Search) == 0 {
		w.Header().Set("Content-Type", "application/json")
		json.NewEncoder(w).Encode(SearchResponse{
			NotFound: true,
		})
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Å—Ç–∞—Ç—å—é
	mainArticle := result.Query.Search[0]

	// –°–æ–±–∏—Ä–∞–µ–º –ø–æ—Ö–æ–∂–∏–µ —Å—Ç–∞—Ç—å–∏
	var similarTitles []string
	for i := 1; i < len(result.Query.Search); i++ {
		similarTitles = append(similarTitles, result.Query.Search[i].Title)
	}

	// –ü–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ç–∞—Ç—å–∏
	content, err := getArticleContent(mainArticle.Title)
	var summary string
	if err == nil && content != "" {
		gigaChatService := services.NewGigaChatService(os.Getenv("GIGACHAT_TOKEN"))
		if gigaChatService != nil {
			summary, _ = gigaChatService.GenerateSummary(r.Context(), content)
		}
	}

	articleURL := fmt.Sprintf("https://ru.wikipedia.org/wiki/%s",
		url.PathEscape(mainArticle.Title))

	// –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
	fmt.Printf("–ù–∞–π–¥–µ–Ω–∞ —Å—Ç–∞—Ç—å—è: %s\n–ü–æ—Ö–æ–∂–∏–µ —Å—Ç–∞—Ç—å–∏: %v\n", mainArticle.Title, similarTitles)

	response := SearchResponse{
		URL:     articleURL,
		Title:   mainArticle.Title,
		Summary: summary,
		Similar: similarTitles,
	}

	w.Header().Set("Content-Type", "application/json")
	if err := json.NewEncoder(w).Encode(response); err != nil {
		fmt.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞: %v\n", err)
	}
}

// –û–±—ä–µ–¥–∏–Ω–∏—Ç—å –æ–±—â—É—é –ª–æ–≥–∏–∫—É –ø–æ–∏—Å–∫–∞
