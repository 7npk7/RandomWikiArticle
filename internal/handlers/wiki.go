package handlers

import (
	"CursorWebApp/internal/services"
	"encoding/json"
	"fmt"
	"io"
	"math/rand"
	"net/http"
	"net/url"
	"os"
	"time"
)

type WikiResponse struct {
	Query struct {
		Search []struct {
			Title   string `json:"title"`
			Snippet string `json:"snippet"`
		} `json:"search"`
		CategoryMembers []struct {
			Title string `json:"title"`
		} `json:"categorymembers"`
	} `json:"query"`
	Continue struct {
		CmContinue string `json:"cmcontinue"`
	} `json:"continue"`
}

type ArticleResponse struct {
	URL     string `json:"url"`
	Title   string `json:"title"`
	Summary string `json:"summary,omitempty"`
}

// –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç—É —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞ –ø–æ—Å–ª–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä
var categoryMap = map[string]string{
	"science": "–ù–∞—É–∫–∞",
	"it":      "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞",
	"sport":   "–°–ø–æ—Ä—Ç",
	"books":   "–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞",
	"games":   "–ö–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã–µ_–∏–≥—Ä—ã",
	"movies":  "–ö–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ",
}

func init() {
	rand.Seed(time.Now().UnixNano())
}

func GetRandomArticleHandler(w http.ResponseWriter, r *http.Request) {
	category := r.URL.Query().Get("category")
	fmt.Printf("üîç –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç—å–∏ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: %s\n", category)

	if category == "" {
		sendError(w, "Category is required", http.StatusBadRequest)
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º —Ä—É—Å—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
	wikiCategory, exists := categoryMap[category]
	if !exists {
		sendError(w, "Invalid category", http.StatusBadRequest)
		return
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è API –∑–∞–ø—Ä–æ—Å–∞ —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
	categoryPath := "–ö–∞—Ç–µ–≥–æ—Ä–∏—è:" + wikiCategory
	apiURL := fmt.Sprintf(
		"https://ru.wikipedia.org/w/api.php?action=query&list=categorymembers&cmtitle=%s&format=json&cmlimit=500&cmnamespace=0&cmtype=page",
		url.QueryEscape(categoryPath),
	)

	fmt.Printf("–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º—ã–π URL: %s\n", apiURL)

	// –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
	w.Header().Set("Cache-Control", "no-cache, no-store, must-revalidate")
	w.Header().Set("Pragma", "no-cache")
	w.Header().Set("Expires", "0")

	client := &http.Client{Timeout: 15 * time.Second}
	req, err := http.NewRequest("GET", apiURL, nil)
	if err != nil {
		sendError(w, fmt.Sprintf("Failed to create request: %v", err), http.StatusInternalServerError)
		return
	}

	req.Header.Set("User-Agent", "RandomWikiArticle/1.0 (educational project)")

	var allArticles []struct {
		Title string `json:"title"`
	}
	cmcontinue := ""

	// –ü–æ–ª—É—á–∞–µ–º –¥–æ 2000 —Å—Ç–∞—Ç–µ–π (4 –∑–∞–ø—Ä–æ—Å–∞ –ø–æ 500)
	for i := 0; i < 4; i++ {
		apiURL := fmt.Sprintf(
			"https://ru.wikipedia.org/w/api.php?action=query&list=categorymembers&cmtitle=%s&format=json&cmlimit=500&cmnamespace=0",
			url.QueryEscape(categoryPath),
		)

		if cmcontinue != "" {
			apiURL += "&cmcontinue=" + url.QueryEscape(cmcontinue)
		}

		resp, err := client.Do(req)
		if err != nil {
			fmt.Printf("‚ùå –û—à–∏–±–∫–∞ API –∑–∞–ø—Ä–æ—Å–∞: %v\n", err)
			continue
		}
		defer resp.Body.Close()

		var wikiResp WikiResponse
		if err := json.NewDecoder(resp.Body).Decode(&wikiResp); err != nil {
			fmt.Printf("–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞: %v\n", err)
			continue
		}

		allArticles = append(allArticles, wikiResp.Query.CategoryMembers...)

		if wikiResp.Continue.CmContinue == "" {
			break
		}
		cmcontinue = wikiResp.Continue.CmContinue
	}

	fmt.Printf("‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å—Ç–∞—Ç–µ–π: %d\n", len(allArticles))

	if len(allArticles) == 0 {
		sendError(w, fmt.Sprintf("No articles found in category: %s", category), http.StatusNotFound)
		return
	}

	// –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Å—Ç–∞—Ç—å—é –∏–∑ –≤—Å–µ–≥–æ —Å–ø–∏—Å–∫–∞
	source := rand.NewSource(time.Now().UnixNano())
	rnd := rand.New(source)
	randomArticle := allArticles[rnd.Intn(len(allArticles))]

	if randomArticle.Title == "" {
		sendError(w, "Failed to get valid random article", http.StatusInternalServerError)
		return
	}

	fmt.Printf("üìé –í—ã–±—Ä–∞–Ω–∞ —Å—Ç–∞—Ç—å—è: %s\n", randomArticle.Title)

	articleURL := fmt.Sprintf("https://ru.wikipedia.org/wiki/%s",
		url.PathEscape(randomArticle.Title))

	// –ü–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å—Ç–∞—Ç—å–∏
	articleContent, err := getArticleContent(randomArticle.Title)
	if err != nil {
		fmt.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è —Å—Ç–∞—Ç—å–∏: %v\n", err)
	}

	fmt.Printf("üìÑ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å—Ç–∞—Ç—å–∏ –¥–ª–∏–Ω–æ–π: %d —Å–∏–º–≤–æ–ª–æ–≤\n", len(articleContent))

	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —á–µ—Ä–µ–∑ GigaChat
	var summary string
	gigaChatService := services.NewGigaChatService(os.Getenv("GIGACHAT_TOKEN"))
	if gigaChatService == nil {
		fmt.Printf("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å GigaChat —Å–µ—Ä–≤–∏—Å\n")
	} else {
		summary, err = gigaChatService.GenerateSummary(r.Context(), articleContent)
		if err != nil {
			fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫—Ä–∞—Ç–∫–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è: %v\n", err)
		}
	}

	// –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(ArticleResponse{
		URL:     articleURL,
		Title:   randomArticle.Title,
		Summary: summary,
	})
}

func getArticleContent(title string) (string, error) {
	apiURL := fmt.Sprintf(
		"https://ru.wikipedia.org/w/api.php?action=query&prop=extracts&exintro=true&format=json&titles=%s",
		url.QueryEscape(title),
	)

	resp, err := http.Get(apiURL)
	if err != nil {
		return "", err
	}
	defer resp.Body.Close()

	var result map[string]interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return "", err
	}

	// –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –æ—Ç–≤–µ—Ç–∞ API
	if pages, ok := result["query"].(map[string]interface{})["pages"].(map[string]interface{}); ok {
		for _, page := range pages {
			if pageMap, ok := page.(map[string]interface{}); ok {
				if extract, ok := pageMap["extract"].(string); ok {
					return extract, nil
				}
			}
		}
	}

	return "", fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–ª—É—á–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å—Ç–∞—Ç—å–∏")
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—à–∏–±–æ–∫
func sendError(w http.ResponseWriter, message string, status int) {
	fmt.Printf("‚ùå %s (—Å—Ç–∞—Ç—É—Å: %d)\n", message, status)
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(status)
	json.NewEncoder(w).Encode(map[string]string{
		"error": message,
	})
}

// –î–æ–±–∞–≤–∏–º –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è –æ—Ç–≤–µ—Ç–∞
type SearchResponse struct {
	URL      string   `json:"url,omitempty"`
	Title    string   `json:"title,omitempty"`
	Summary  string   `json:"summary,omitempty"`
	Similar  []string `json:"similar,omitempty"` // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ –¥–ª—è –ø–æ—Ö–æ–∂–∏—Ö —Å—Ç–∞—Ç–µ–π
	NotFound bool     `json:"notFound,omitempty"`
}

func SearchWikiHandler(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query().Get("query")
	if query == "" {
		sendError(w, "Query is required", http.StatusBadRequest)
		return
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
	fmt.Printf("–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: %s\n", query)

	// –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
	apiURL := fmt.Sprintf(
		"https://ru.wikipedia.org/w/api.php?action=query&list=search&srsearch=%s&format=json&srlimit=5&utf8=1&srwhat=text&srenablerewrites=1",
		url.QueryEscape(query),
	)

	// –°–æ–∑–¥–∞–µ–º HTTP –∫–ª–∏–µ–Ω—Ç —Å —Ç–∞–π–º–∞—É—Ç–æ–º
	client := &http.Client{Timeout: 10 * time.Second}

	req, err := http.NewRequest("GET", apiURL, nil)
	if err != nil {
		sendError(w, fmt.Sprintf("Failed to create request: %v", err), http.StatusInternalServerError)
		return
	}

	// –î–æ–±–∞–≤–ª—è–µ–º User-Agent
	req.Header.Set("User-Agent", "WikiSearchApp/1.0")

	resp, err := client.Do(req)
	if err != nil {
		sendError(w, fmt.Sprintf("Failed to search: %v", err), http.StatusInternalServerError)
		return
	}
	defer resp.Body.Close()

	// –ß–∏—Ç–∞–µ–º —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
	body, err := io.ReadAll(resp.Body)
	if err != nil {
		sendError(w, fmt.Sprintf("Failed to read response: %v", err), http.StatusInternalServerError)
		return
	}

	// –í—ã–≤–æ–¥–∏–º –æ—Ç–≤–µ—Ç API –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
	fmt.Printf("–û—Ç–≤–µ—Ç API Wikipedia: %s\n", string(body))

	var result struct {
		Query struct {
			Search []struct {
				Title   string `json:"title"`
				Snippet string `json:"snippet"`
			} `json:"search"`
			SearchInfo struct {
				TotalHits int `json:"totalhits"`
			} `json:"searchinfo"`
		} `json:"query"`
	}

	if err := json.Unmarshal(body, &result); err != nil {
		sendError(w, fmt.Sprintf("Failed to decode response: %v", err), http.StatusInternalServerError)
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
	if len(result.Query.Search) == 0 {
		// –ü—Ä–æ–±—É–µ–º –ø–æ–∏—Å–∫ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –æ–ø–µ—á–∞—Ç–æ–∫
		apiURL = fmt.Sprintf(
			"https://ru.wikipedia.org/w/api.php?action=query&list=search&srsearch=%s&format=json&srlimit=5&utf8=1&srwhat=text&srenablerewrites=1&srinfo=suggestion",
			url.QueryEscape(query),
		)

		req, _ = http.NewRequest("GET", apiURL, nil)
		req.Header.Set("User-Agent", "WikiSearchApp/1.0")

		resp, err = client.Do(req)
		if err != nil || resp.StatusCode != http.StatusOK {
			w.Header().Set("Content-Type", "application/json")
			json.NewEncoder(w).Encode(SearchResponse{
				NotFound: true,
			})
			return
		}
		defer resp.Body.Close()

		if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
			w.Header().Set("Content-Type", "application/json")
			json.NewEncoder(w).Encode(SearchResponse{
				NotFound: true,
			})
			return
		}
	}

	if len(result.Query.Search) == 0 {
		w.Header().Set("Content-Type", "application/json")
		json.NewEncoder(w).Encode(SearchResponse{
			NotFound: true,
		})
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Å—Ç–∞—Ç—å—é
	mainArticle := result.Query.Search[0]

	// –°–æ–±–∏—Ä–∞–µ–º –ø–æ—Ö–æ–∂–∏–µ —Å—Ç–∞—Ç—å–∏
	var similarTitles []string
	for i := 1; i < len(result.Query.Search); i++ {
		similarTitles = append(similarTitles, result.Query.Search[i].Title)
	}

	// –ü–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ç–∞—Ç—å–∏
	content, err := getArticleContent(mainArticle.Title)
	var summary string
	if err == nil && content != "" {
		gigaChatService := services.NewGigaChatService(os.Getenv("GIGACHAT_TOKEN"))
		if gigaChatService != nil {
			summary, _ = gigaChatService.GenerateSummary(r.Context(), content)
		}
	}

	articleURL := fmt.Sprintf("https://ru.wikipedia.org/wiki/%s",
		url.PathEscape(mainArticle.Title))

	// –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
	fmt.Printf("–ù–∞–π–¥–µ–Ω–∞ —Å—Ç–∞—Ç—å—è: %s\n–ü–æ—Ö–æ–∂–∏–µ —Å—Ç–∞—Ç—å–∏: %v\n", mainArticle.Title, similarTitles)

	response := SearchResponse{
		URL:     articleURL,
		Title:   mainArticle.Title,
		Summary: summary,
		Similar: similarTitles,
	}

	w.Header().Set("Content-Type", "application/json")
	if err := json.NewEncoder(w).Encode(response); err != nil {
		fmt.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞: %v\n", err)
	}
}

// –û–±—ä–µ–¥–∏–Ω–∏—Ç—å –æ–±—â—É—é –ª–æ–≥–∏–∫—É –ø–æ–∏—Å–∫–∞
